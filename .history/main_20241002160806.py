import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
import random
import sqlite3

API_TOKEN = '8024335015:AAEeQ6cZSHJdvSXhMzyubyth1UHOv2mFtpM'
ADMIN_ID = 1083294848 # –í–∞—à Telegram ID –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('bot_database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, access_expires DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS keys (key TEXT PRIMARY KEY, valid_until DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS mailings (mailing_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, chats TEXT, messages TEXT, status TEXT, sent_messages INTEGER, start_time DATETIME)''')
conn.commit()

# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ===================

class AdminStates(StatesGroup):
    waiting_for_days = State()

class UserStates(StatesGroup):
    waiting_for_key = State()
    waiting_for_chats = State()
    waiting_for_messages = State()
    waiting_for_delay = State()

class MailingControlStates(StatesGroup):
    managing_mailing = State()

# ================== –ú–ï–ù–Æ ===================

def get_admin_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üë®‚Äçüíº –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É')],
            [KeyboardButton(text='üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')],
            [KeyboardButton(text='üìã –ü—Ä–æ—Ñ–∏–ª—å')]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_user_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üìã –ü—Ä–æ—Ñ–∏–ª—å')],
            [KeyboardButton(text='üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_mailing_control_keyboard(mailing_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"pause_mailing_{mailing_id}")],
        [InlineKeyboardButton(text="‚õî –ü—Ä–µ—Ä–≤–∞—Ç—å", callback_data=f"cancel_mailing_{mailing_id}")]
    ])
    return keyboard

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–ê ===================

@dp.message(Command(commands=["start"]))
async def start_bot(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, <b>–∞–¥–º–∏–Ω</b>!", reply_markup=get_admin_menu(), parse_mode="HTML")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", parse_mode="HTML")

@dp.message(F.text == "üë®‚Äçüíº –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", parse_mode="HTML")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞", callback_data="generate_key")]
    ])
    await message.answer("<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>:", reply_markup=keyboard, parse_mode="HTML")
@dp.callback_query(F.data == "generate_key")
async def generate_key_panel(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –≤ –¥–Ω—è—Ö.", parse_mode="MarkdownV2")
    await state.set_state(AdminStates.waiting_for_days)

@dp.message(AdminStates.waiting_for_days)
async def process_generate_key(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        key = generate_key()
        valid_until = (datetime.now() + timedelta(days=days)).isoformat()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

        cursor.execute('INSERT INTO keys (key, valid_until) VALUES (?, ?)', (key, valid_until))
        conn.commit()

        await message.answer(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: *{key}*\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π.", parse_mode="MarkdownV2")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.", parse_mode="MarkdownV2")

# ================== –ü–û–ú–û–©–ù–ò–ö–ò ===================

def generate_key():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∫–ª—é—á–∞"""
    return ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', k=8))

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===================

@dp.message(F.text == "üóùÔ∏è –í–≤–µ—Å—Ç–∏ –∫–æ–¥")
async def ask_for_code(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á.", parse_mode="MarkdownV2")
    await state.set_state(UserStates.waiting_for_key)

@dp.message(UserStates.waiting_for_key)
async def process_code(message: Message, state: FSMContext):
    key = message.text
    cursor.execute('SELECT valid_until FROM keys WHERE key = ?', (key,))
    result = cursor.fetchone()

    if result:
        valid_until = result[0]
        cursor.execute('DELETE FROM keys WHERE key = ?', (key,))
        conn.commit()

        cursor.execute('INSERT INTO users (user_id, access_expires) VALUES (?, ?)', (message.from_user.id, valid_until))
        conn.commit()

        await message.answer(f"–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ: {valid_until}", reply_markup=get_user_menu(), parse_mode="MarkdownV2")
        await state.clear()
    else:
        await message.answer("–ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.", parse_mode="MarkdownV2")
        await state.clear()

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ===================

@dp.message(F.text == "üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
async def new_mailing(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (—Å—Å—ã–ª–∫–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).", parse_mode="MarkdownV2")
    await state.set_state(UserStates.waiting_for_chats)

@dp.message(UserStates.waiting_for_chats)
async def process_chats(message: Message, state: FSMContext):
    chats = message.text.split(',')
    await state.update_data(chats=chats)

    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É).", parse_mode="MarkdownV2")
    await state.set_state(UserStates.waiting_for_messages)

@dp.message(UserStates.waiting_for_messages)
async def process_messages(message: Message, state: FSMContext):
    messages = message.text.split('\n')
    await state.update_data(messages=messages)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.", parse_mode="MarkdownV2")
    await state.set_state(UserStates.waiting_for_delay)

@dp.message(UserStates.waiting_for_delay)
async def process_delay(message: Message, state: FSMContext):
    try:
        delay = int(message.text)
        user_data = await state.get_data()
        chats = user_data['chats']
        messages = user_data['messages']

        mailing_id = cursor.execute(
            'INSERT INTO mailings (user_id, chats, messages, status, sent_messages, start_time) VALUES (?, ?, ?, ?, ?, ?)',
            (message.from_user.id, ','.join(chats), '\n'.join(messages), 'active', 0, datetime.now().isoformat())
        ).lastrowid
        conn.commit()

        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ #**{mailing_id}** —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!", reply_markup=get_mailing_control_keyboard(mailing_id), parse_mode="MarkdownV2")

        asyncio.create_task(send_messages(mailing_id, chats, messages, delay))
        await state.clear()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏.", parse_mode="MarkdownV2")

async def send_messages(mailing_id, chats, messages, delay):
    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('active', mailing_id))
    conn.commit()

    sent_count = 0

    for chat in chats:
        # –ü–æ—Å–∫–æ–ª—å–∫—É –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª–∞–º, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
        try:
            for message in random.sample(messages, len(messages)):  # –°–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                await bot.send_message(chat.strip(), message)
                sent_count += 1
                cursor.execute('UPDATE mailings SET sent_messages = ? WHERE mailing_id = ?', (sent_count, mailing_id))
                conn.commit()

                await asyncio.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat}: {e}")

    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('completed', mailing_id))
    conn.commit()

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ê–ú–ò ===================

@dp.callback_query(F.data.startswith("pause_mailing_"))
async def pause_mailing(callback_query: CallbackQuery):
    mailing_id = callback_query.data.split("_")[-1]
    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('paused', mailing_id))
    conn.commit()

    await callback_query.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ #**{mailing_id}** –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"resume_mailing_{mailing_id}")]
    ]), parse_mode="MarkdownV2")

@dp.callback_query(F.data.startswith("cancel_mailing_"))
async def cancel_mailing(callback_query: CallbackQuery):
    mailing_id = callback_query.data.split("_")[-1]
    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('cancelled', mailing_id))
    conn.commit()

    await callback_query.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ #**{mailing_id}** –ø—Ä–µ—Ä–≤–∞–Ω–∞.", parse_mode="MarkdownV2")

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===================
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())