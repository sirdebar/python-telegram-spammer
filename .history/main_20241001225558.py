import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import random
import sqlite3
from datetime import datetime, timedelta

API_TOKEN = 'YOUR_BOT_API_TOKEN'
ADMIN_ID = 1083294848  # –í–∞—à Telegram ID –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('bot_database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, access_expires DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS keys (key TEXT PRIMARY KEY, valid_until DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS mailings (mailing_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, chats TEXT, messages TEXT, status TEXT, sent_messages INTEGER, start_time DATETIME)''')
conn.commit()

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–ê ===================

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    keyboard = InlineKeyboardMarkup()
    generate_key_btn = InlineKeyboardButton('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞', callback_data='generate_key')
    keyboard.add(generate_key_btn)

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=keyboard)

@dp.callback_query_handler(Text(startswith='generate_key'))
async def generate_key_panel(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –≤ –¥–Ω—è—Ö:")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
    @dp.message_handler()
    async def process_generate_key(message: types.Message):
        try:
            days = int(message.text)
            key = generate_key()
            valid_until = datetime.now() + timedelta(days=days)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('INSERT INTO keys (key, valid_until) VALUES (?, ?)', (key, valid_until))
            conn.commit()

            await message.answer(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: **{key}**\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.")

# ================== –ü–û–ú–û–©–ù–ò–ö–ò ===================

def generate_key():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∫–ª—é—á–∞"""
    return ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', k=8))

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===================

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    enter_code_btn = KeyboardButton('üóùÔ∏è –í–≤–µ—Å—Ç–∏ –∫–æ–¥')
    keyboard.add(enter_code_btn)

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=keyboard)

@dp.message_handler(Text(equals="üóùÔ∏è –í–≤–µ—Å—Ç–∏ –∫–æ–¥"))
async def ask_for_code(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á:")

    @dp.message_handler()
    async def process_code(message: types.Message):
        key = message.text
        cursor.execute('SELECT valid_until FROM keys WHERE key = ?', (key,))
        result = cursor.fetchone()

        if result:
            valid_until = result[0]
            cursor.execute('DELETE FROM keys WHERE key = ?', (key,))
            conn.commit()

            cursor.execute('INSERT INTO users (user_id, access_expires) VALUES (?, ?)', (message.from_user.id, valid_until))
            conn.commit()

            await message.answer("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ: " + valid_until)
        else:
            await message.answer("–ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

# ================== –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ===================

@dp.message_handler(commands=['new_mailing'])
async def new_mailing(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")

    @dp.message_handler()
    async def process_chats(message: types.Message):
        chats = message.text.split(',')

        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É).")

        @dp.message_handler()
        async def process_messages(message: types.Message):
            messages = message.text.split('\n')

            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")

            @dp.message_handler()
            async def process_delay(message: types.Message):
                try:
                    delay = int(message.text)
                    mailing_id = cursor.execute('INSERT INTO mailings (user_id, chats, messages, status, sent_messages, start_time) VALUES (?, ?, ?, ?, ?, ?)',
                                                (message.from_user.id, ','.join(chats), '\n'.join(messages), 'active', 0, datetime.now())).lastrowid
                    conn.commit()

                    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ #**{mailing_id}** —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!")

                    # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
                    asyncio.create_task(send_messages(mailing_id, chats, messages, delay))

                except ValueError:
                    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏.")

async def send_messages(mailing_id, chats, messages, delay):
    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('active', mailing_id))
    conn.commit()

    sent_count = 0

    for chat_id in chats:
        for message in random.sample(messages, len(messages)):  # –°–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            await bot.send_message(chat_id, message)
            sent_count += 1
            cursor.execute('UPDATE mailings SET sent_messages = ? WHERE mailing_id = ?', (sent_count, mailing_id))
            conn.commit()

            await asyncio.sleep(delay)

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('completed', mailing_id))
    conn.commit()

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===================
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
