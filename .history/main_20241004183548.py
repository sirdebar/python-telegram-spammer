import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from telethon.tl.types import InputPeerChannel, Channel
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
from telethon.errors.rpcerrorlist import PhoneNumberInvalidError
from datetime import datetime, timedelta
import random
import os
import sqlite3
import threading

API_TOKEN = '8024335015:AAEeQ6cZSHJdvSXhMzyubyth1UHOv2mFtpM'
ADMIN_ID = 1083294848 # –í–∞—à Telegram ID –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ
TELEGRAM_API_ID = '23422308'
TELEGRAM_API_HASH = '1da8d8d190e8fb59531b28258d1ed64c'
BUY_LINK = "https://t.me/sirdebar"

db_lock = threading.Lock()

if not os.path.exists('temp_photos'):
    os.makedirs('temp_photos')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

session = AiohttpSession()
bot = Bot(token=API_TOKEN, session=session, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('bot_database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY, 
        name TEXT, 
        subscription_expires DATETIME
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS accounts (
        account_id INTEGER PRIMARY KEY AUTOINCREMENT, 
        user_id INTEGER, 
        phone_number TEXT, 
        session TEXT
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS keys (
        key TEXT PRIMARY KEY, 
        valid_until DATETIME, 
        days INTEGER
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS mailings (
        mailing_id INTEGER PRIMARY KEY AUTOINCREMENT, 
        user_id INTEGER, 
        chats TEXT, 
        messages TEXT, 
        status TEXT, 
        sent_messages INTEGER, 
        start_time DATETIME
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS chats (
        chat_id INTEGER PRIMARY KEY, 
        account_id INTEGER, 
        title TEXT
    )
''')
conn.commit()

# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ===================

class AccountStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()

class MailingStates(StatesGroup):
    waiting_for_account = State()
    choosing_chats = State()
    waiting_for_messages = State()
    waiting_for_delay = State()
    waiting_for_action = State()

class KeyStates(StatesGroup):
    waiting_for_key = State()
    waiting_for_days = State()

# ================== –ú–ï–ù–Æ ===================

def get_new_user_menu():
    """–ú–µ–Ω—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø', url=BUY_LINK)],
            [KeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞')]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_user_menu():
    """–ú–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üìã –ü—Ä–æ—Ñ–∏–ª—å')],
            [KeyboardButton(text='üóùÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')],
            [KeyboardButton(text='üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_admin_menu():
    """–ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞')],
            [KeyboardButton(text='üìã –ü—Ä–æ—Ñ–∏–ª—å')],
            [KeyboardButton(text='üóùÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')],  # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–æ–±–∞–≤–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã
            [KeyboardButton(text='üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')]
        ],
        resize_keyboard=True
    )
    return keyboard

# ================== –ü–†–û–§–ò–õ–¨ –ò –ü–û–î–ü–ò–°–ö–ê ===================

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "start"
@dp.message(Command(commands=["start"]))
async def start_bot(message: Message):
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω, —Å—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if user_id == ADMIN_ID:
        await message.answer("<b>üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!</b>", reply_markup=get_admin_menu())
        return
    
    cursor.execute('SELECT subscription_expires FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result:
        subscription_expires = result[0]
        if datetime.strptime(subscription_expires, "%Y-%m-%d %H:%M:%S") > datetime.now():
            await message.answer("<b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –í–∞—à –¥–æ—Å—Ç—É–ø <b>–∞–∫—Ç–∏–≤–µ–Ω</b>.", reply_markup=get_user_menu())
        else:
            await message.answer("<b>‚è≥ –í–∞—à –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫.</b> –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.", reply_markup=get_new_user_menu())
    else:
        await message.answer("<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.", reply_markup=get_new_user_menu())

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
# ================== –ü–†–û–§–ò–õ–¨ –ò –ü–û–î–ü–ò–°–ö–ê ===================

@dp.message(F.text == "üìã –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    user_id = message.from_user.id

    if user_id == ADMIN_ID:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        cursor.execute('SELECT COUNT(*) FROM users WHERE subscription_expires > ?', (datetime.now().strftime("%Y-%m-%d %H:%M:%S"),))
        active_subscribers = cursor.fetchone()[0]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        cursor.execute('SELECT SUM(sent_messages) FROM mailings')
        total_mailings = cursor.fetchone()[0] or 0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        cursor.execute('SELECT SUM(sent_messages) FROM mailings WHERE user_id = ?', (ADMIN_ID,))
        personal_mailings = cursor.fetchone()[0] or 0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0, –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –¥–µ–ª–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.answer(
            "<b>üëë –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            f"<b>–ò–º—è:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
            f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {active_subscribers}\n\n"
            f"<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫:</b> {total_mailings}\n\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫:</b> {personal_mailings}"
        )
        return

    # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT name, subscription_expires FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if not result:
        await message.answer("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.</b>")
        return

    name, subscription_expires = result
    cursor.execute('SELECT SUM(sent_messages) FROM mailings WHERE user_id = ?', (user_id,))
    mailing_count = cursor.fetchone()[0] or 0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0, –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–æ–∫ –Ω–µ—Ç

    await message.answer(
        f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"<b>–ò–º—è:</b> {name}\n\n"
        f"<b>–û—Å—Ç–∞–≤—à–∏–π—Å—è —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_expires}\n\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫:</b> {mailing_count}"
    )

# ================== –ü–û–ö–£–ü–ö–ê –î–û–°–¢–£–ü–ê ===================

@dp.message(F.text == "üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def buy_access(message: Message):
    admin_username = "sirdebar"  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à username
    await message.answer(f"<b>–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É @{admin_username}!</b>")

# ================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–ô ===================

@dp.message(F.text == "üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
async def ask_for_key(message: Message, state: FSMContext):
    await message.answer("<b>üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.</b>")
    await state.set_state(KeyStates.waiting_for_key)

@dp.message(KeyStates.waiting_for_key)
async def process_key(message: Message, state: FSMContext):
    key = message.text
    cursor.execute('SELECT valid_until, days FROM keys WHERE key = ?', (key,))
    result = cursor.fetchone()

    if result:
        valid_until, days = result
        if datetime.strptime(valid_until, "%Y-%m-%d %H:%M:%S") > datetime.now():
            subscription_expires = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('INSERT OR REPLACE INTO users (user_id, name, subscription_expires) VALUES (?, ?, ?)',
                           (message.from_user.id, message.from_user.full_name, subscription_expires))
            conn.commit()

            await message.answer("<b>‚úÖ –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> –í–∞—à –¥–æ—Å—Ç—É–ø <b>–ø—Ä–æ–¥–ª–µ–Ω</b>.", reply_markup=get_user_menu())
        else:
            await message.answer("<b>‚õî –ö–ª—é—á –∏—Å—Ç–µ–∫.</b>")
    else:
        await message.answer("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.</b>")
    
    await state.clear()

# ================== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ===================

async def check_subscription_expiration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞, –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ –∏—Å—Ç–µ–∫–ª–∞."""
    while True:
        cursor.execute('SELECT user_id, subscription_expires FROM users')
        users = cursor.fetchall()

        for user_id, subscription_expires in users:
            if datetime.strptime(subscription_expires, "%Y-%m-%d %H:%M:%S") < datetime.now():
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                await bot.send_message(
                    user_id,
                    "<b>‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.</b>\n"
                    "–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤—ã –º–æ–∂–µ—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                await bot.send_message(
                    user_id,
                    "<b>–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤—ã –º–æ–∂–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.</b>",
                    reply_markup=get_new_user_menu()
                )

                # –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º (–≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ)
                cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
                conn.commit()

        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

# ================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê ===================

@dp.message(F.text == "üóùÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def add_account(message: Message, state: FSMContext):
    await message.answer("<b>üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 9123456789).</b>")
    await state.set_state(AccountStates.waiting_for_phone)

@dp.message(AccountStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone_number = message.text
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telethon
    session_path = f'sessions/{phone_number}.session'
    if not os.path.exists('sessions'):
        os.mkdir('sessions')

    client = TelegramClient(session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH)
    await client.connect()

    try:
        if not await client.is_user_authorized():
            await client.send_code_request(phone_number)
            await message.answer(f"<b>üì≤ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}.</b> –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ.")
            await state.update_data(phone_number=phone_number, client=client)
            await state.set_state(AccountStates.waiting_for_code)
        else:
            await message.answer("<b>‚úÖ –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.</b>")
            await state.clear()
    except PhoneNumberInvalidError:
        await message.answer(f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.</b>")
        await state.clear()

@dp.message(AccountStates.waiting_for_code)
async def process_code(message: Message, state: FSMContext):
    code = message.text
    user_data = await state.get_data()
    phone_number = user_data['phone_number']
    client = user_data['client']

    try:
        await client.sign_in(phone_number, code)
        session_string = client.session.save()
        cursor.execute('INSERT INTO accounts (user_id, phone_number, session) VALUES (?, ?, ?)', (message.from_user.id, phone_number, session_string))
        conn.commit()

        await message.answer(f"<b>üóùÔ∏è –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.</b>")
        await state.clear()

    except SessionPasswordNeededError:
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–ª—è 2FA, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        await message.answer("<b>üîê –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</b>")
        await state.update_data(client=client)
        await state.set_state(AccountStates.waiting_for_password)

    except Exception as e:
        await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b> {e}")
        await state.clear()

@dp.message(AccountStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    client = user_data['client']

    try:
        # –í—Ö–æ–¥–∏–º —Å –ø–∞—Ä–æ–ª–µ–º
        await client.sign_in(password=password)
        phone_number = user_data['phone_number']
        session_string = client.session.save()
        cursor.execute('INSERT INTO accounts (user_id, phone_number, session) VALUES (?, ?, ?)', (message.from_user.id, phone_number, session_string))
        conn.commit()

        await message.answer(f"<b>üóùÔ∏è –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.</b>")
        await state.clear()

    except Exception as e:
        await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b> {e}")
        await state.set_state(AccountStates.waiting_for_password)

# ================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê –ò –ü–ê–†–°–ò–ù–ì –ß–ê–¢–û–í ===================

async def get_chats(client, account_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    dialogs = await client.get_dialogs()
    for dialog in dialogs:
        if isinstance(dialog.entity, InputPeerChannel):
            chat_id = dialog.id
            title = dialog.title
            cursor.execute('INSERT OR REPLACE INTO chats (chat_id, account_id, title) VALUES (?, ?, ?)', (chat_id, account_id, title))
    conn.commit()

# ================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–õ–Æ–ß–ê –î–õ–Ø –ê–î–ú–ò–ù–ê –° –í–´–ë–û–†–û–ú –°–†–û–ö–ê ===================

@dp.message(F.text == "üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞")
async def ask_for_days(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.</b>")
        return
    await message.answer("<b>üìÖ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –≤ –¥–Ω—è—Ö:</b>")
    await state.set_state(KeyStates.waiting_for_days)

@dp.message(KeyStates.waiting_for_days)
async def generate_key(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        if days <= 0:
            await message.answer("<b>‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.</b>")
            return

        key = generate_random_key()
        valid_until = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")

        cursor.execute('INSERT INTO keys (key, valid_until, days) VALUES (?, ?, ?)', (key, valid_until, days))
        conn.commit()

        await message.answer(f"<b>üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ {days} –¥–Ω–µ–π:</b> {key}")
        await state.clear()

    except ValueError:
        await message.answer("<b>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.</b>")

def generate_random_key():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∫–ª—é—á–∞"""
    return ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=8))

# ================== –†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===================

def get_chat_control_keyboard(chats, selected_chats, page=0):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup()
    for chat in chats[page*10:(page+1)*10]:
        status = "‚úÖ" if chat['id'] in selected_chats else "‚ùå"
        keyboard.add(InlineKeyboardButton(text=f"{chat['title']} {status}", callback_data=f"toggle_chat_{chat['id']}"))

    if len(chats) > 10:
        if page > 0:
            keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_page_{page-1}"))
        if (page + 1) * 10 < len(chats):
            keyboard.add(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_page_{page+1}"))
    
    keyboard.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_chats"))
    return keyboard

@dp.message(F.text == "üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
async def new_mailing(message: Message, state: FSMContext):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT account_id, phone_number FROM accounts WHERE user_id = ?', (message.from_user.id,))
    accounts = cursor.fetchall()

    if not accounts:
        await message.answer("<b>‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ê–∫–∫–∞—É–Ω—Ç {account[1]}", callback_data=f"choose_account_{account[0]}")]
        for account in accounts
    ])

    await message.answer("<b>üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", reply_markup=keyboard)
    await state.set_state(MailingStates.waiting_for_account)

@dp.callback_query(F.data.startswith("choose_account_"))
async def choose_account(callback_query: CallbackQuery, state: FSMContext):
    account_id = int(callback_query.data.split("_")[-1])

    # –ü–∞—Ä—Å–∏–º –≥—Ä—É–ø–ø—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    cursor.execute('SELECT phone_number, session FROM accounts WHERE account_id = ?', (account_id,))
    account = cursor.fetchone()
    phone_number, session_string = account

    client = TelegramClient(f'sessions/{phone_number}', TELEGRAM_API_ID, TELEGRAM_API_HASH)
    await client.connect()
    if not await client.is_user_authorized():
        await callback_query.message.answer("<b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.</b>")
        await state.clear()
        return

    # –ü–∞—Ä—Å–∏–º –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await get_group_chats(client, account_id)
    await client.disconnect()

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    cursor.execute('SELECT chat_id, title FROM chats WHERE account_id = ?', (account_id,))
    chats = cursor.fetchall()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º account_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(account_id=account_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    await show_chat_selection(callback_query.message, chats, state, page=0)

async def show_chat_selection(message, chats, state, page=0):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    per_page = 10
    start = page * per_page
    end = start + per_page
    current_page_chats = chats[start:end]

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    selected_chats = user_data.get('selected_chats', [chat[0] for chat in chats])  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ —á–∞—Ç—ã –≤—ã–±—Ä–∞–Ω—ã

    buttons = []
    for chat in current_page_chats:
        status = "‚úÖ" if chat[0] in selected_chats else "‚ùå"
        buttons.append([InlineKeyboardButton(text=f"{chat[1]} {status}", callback_data=f"toggle_chat_{chat[0]}")])

    if len(chats) > per_page:
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_page_{page-1}"))
        if end < len(chats):
            pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_page_{page+1}"))
        buttons.append(pagination_buttons)

    buttons.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_chats")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", reply_markup=keyboard)
    await state.update_data(selected_chats=selected_chats, all_chats=chats, page=page)

@dp.callback_query(F.data.startswith("toggle_chat_"))
async def toggle_chat(callback_query: CallbackQuery, state: FSMContext):
    chat_id = int(callback_query.data.split("_")[-1])
    user_data = await state.get_data()
    selected_chats = user_data['selected_chats']

    # –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤
    if chat_id in selected_chats:
        selected_chats.remove(chat_id)
    else:
        selected_chats.append(chat_id)

    await state.update_data(selected_chats=selected_chats)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–æ–≤
    chats = user_data['all_chats']
    page = user_data['page']
    await show_chat_selection(callback_query.message, chats, state, page=page)

@dp.callback_query(F.data.startswith("next_page_") | F.data.startswith("prev_page_"))
async def paginate_chats(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    chats = user_data['all_chats']
    page = int(callback_query.data.split("_")[-1])

    await show_chat_selection(callback_query.message, chats, state, page)

@dp.callback_query(F.data == "confirm_chats")
async def confirm_chats(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>")
    await state.set_state(MailingStates.waiting_for_messages)

# ================== –ü–†–û–¶–ï–°–° –†–ê–°–°–´–õ–ö–ò ===================

@dp.message(MailingStates.waiting_for_messages, F.text | F.photo)
async def process_messages(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
    if message.photo:
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –¥–∏—Å–∫
        photo_path = f"temp_photos/{photo.file_id}.jpg"
        os.makedirs("temp_photos", exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        with open(photo_path, 'wb') as new_file:
            new_file.write(downloaded_file.getvalue())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(photo=photo_path)
        if message.caption:
            await state.update_data(messages=message.caption)  # –ü–æ–¥–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç
        else:
            await state.update_data(messages=None)  # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—É—Å—Ç—ã–º

    elif message.text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(messages=message.text)
        await state.update_data(photo=None)  # –û–±–Ω—É–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç

    await message.answer("<b>‚è≥ –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5—Å, 5–º, 5—á, –º–∞–∫—Å–∏–º—É–º 5 —á–∞—Å–æ–≤, –º–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥).</b>")
    await state.set_state(MailingStates.waiting_for_delay)


def parse_delay(delay_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–µ–∫—É–Ω–¥, –º–∏–Ω—É—Ç –∏ —á–∞—Å–æ–≤."""
    if delay_str.endswith('—Å'):
        return int(delay_str[:-1])
    elif delay_str.endswith('–º'):
        return int(delay_str[:-1]) * 60
    elif delay_str.endswith('—á'):
        return int(delay_str[:-1]) * 3600
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–µ—Ä–∂–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å (—Å–µ–∫—É–Ω–¥—ã), –º (–º–∏–Ω—É—Ç—ã), —á (—á–∞—Å—ã).")

@dp.message(MailingStates.waiting_for_delay)
async def process_delay(message: Message, state: FSMContext):
    try:
        delay = parse_delay(message.text)
        if delay < 5 or delay > 18000:  # –ú–∞–∫—Å–∏–º—É–º 5 —á–∞—Å–æ–≤ (18000 —Å–µ–∫—É–Ω–¥)
            raise ValueError

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(delay=delay)

        user_data = await state.get_data()
        account_id = user_data['account_id']
        selected_chats = user_data['selected_chats']
        messages = user_data.get('messages')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        photo = user_data.get('photo')  # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å

        if not messages and not photo:
            await message.answer("<b>‚ö†Ô∏è –í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        asyncio.create_task(start_mailing(account_id, selected_chats, messages, photo, delay, message.from_user.id))
        await message.answer("<b>üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b> –°—Ç–∞—Ç—É—Å: <b>–ê–∫—Ç–∏–≤–Ω–∞</b>", reply_markup=get_mailing_control_keyboard(paused=False))
        await state.set_state(MailingStates.waiting_for_action)

    except ValueError:
        await message.answer("<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 5—Å, 5–º, 5—á (–Ω–µ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥ –∏ –Ω–µ –±–æ–ª–µ–µ 5 —á–∞—Å–æ–≤).</b>")

def get_mailing_control_keyboard(paused=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π."""
    buttons = []
    if paused:
        buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="resume_mailing")])
    else:
        buttons.append([InlineKeyboardButton(text="‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="pause_mailing")])
    buttons.append([InlineKeyboardButton(text="‚èπ –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="stop_mailing")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def send_messages(account_id, chats, messages, delay, user_id):
    cursor.execute('SELECT phone_number, session FROM accounts WHERE account_id = ?', (account_id,))
    account = cursor.fetchone()

    session_path = f'sessions/{account[0]}.session'
    client = TelegramClient(session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH)
    await client.connect()

    sent_count = 0
    previous_message = None

    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
    for chat in chats:
        try:
            previous_message = await client.send_message(chat, messages)
            sent_count += 1
            cursor.execute('INSERT INTO mailings (user_id, chats, messages, status, sent_messages, start_time) VALUES (?, ?, ?, ?, ?, ?)',
                           (user_id, ','.join(str(c) for c in chats), '\n'.join(messages), 'active', sent_count, datetime.now().isoformat()))
            conn.commit()

            # –ñ–¥–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await asyncio.sleep(delay)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat}: {e}")

    await client.disconnect()

# ================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê –ò –ü–ê–†–°–ò–ù–ì –ì–†–£–ü–ü ===================

async def get_group_chats(client, account_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    dialogs = await client.get_dialogs()
    for dialog in dialogs:
        if isinstance(dialog.entity, Channel) and dialog.entity.megagroup:
            chat_id = dialog.id
            title = dialog.title
            cursor.execute('INSERT OR REPLACE INTO chats (chat_id, account_id, title) VALUES (?, ?, ?)', (chat_id, account_id, title))
    conn.commit()

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–û–ô ===================

active_mailings = {}

async def start_mailing(account_id, chats, messages, photo, delay, user_id):
    """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π."""
    active_mailings[user_id] = True  # –†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    cursor.execute('SELECT phone_number, session FROM accounts WHERE account_id = ?', (account_id,))
    account = cursor.fetchone()

    session_path = f'sessions/{account[0]}.session'
    client = TelegramClient(session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH)
    await client.connect()

    sent_count = 0

    while active_mailings.get(user_id):
        for chat_id in chats:
            if not active_mailings.get(user_id):
                break
            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
                if photo:
                    await client.send_file(chat_id, photo, caption=messages if messages else "")
                else:
                    await client.send_message(chat_id, messages)
                sent_count += 1
                await asyncio.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
        
        # –ü–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ –∂–¥–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ü–∏–∫–ª–æ–º
        if active_mailings.get(user_id):
            await asyncio.sleep(delay)
        
    await client.disconnect()

@dp.callback_query(F.data == "pause_mailing")
async def pause_mailing(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—É–∑—ã —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = callback_query.from_user.id
    if active_mailings.get(user_id):
        active_mailings[user_id] = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É (–ø–∞—É–∑–∞)
        await callback_query.message.edit_text("<b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=get_mailing_control_keyboard(paused=True))

@dp.callback_query(F.data == "resume_mailing")
async def resume_mailing(callback_query: CallbackQuery, state: FSMContext):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã."""
    user_data = await state.get_data()

    account_id = user_data.get('account_id')  # –ü–æ–ª—É—á–∞–µ–º id –∞–∫–∫–∞—É–Ω—Ç–∞
    selected_chats = user_data.get('selected_chats')  # –ß–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    messages = user_data.get('messages')  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    photo = user_data.get('photo')  # –§–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    delay = user_data.get('delay')  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –±—ã–ª–æ —Å–ª—É—á–∞–π–Ω–æ —É–¥–∞–ª–µ–Ω–æ
    if photo and not os.path.exists(photo):
        await callback_query.message.edit_text("<b>–û—à–∏–±–∫–∞:</b> –§–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ.")
        return

    if not account_id or not selected_chats or not delay:
        await callback_query.message.edit_text("<b>–û—à–∏–±–∫–∞:</b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    active_mailings[callback_query.from_user.id] = True
    asyncio.create_task(start_mailing(account_id, selected_chats, messages, photo, delay, callback_query.from_user.id))

    await callback_query.message.edit_text("<b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> –ê–∫—Ç–∏–≤–Ω–∞", reply_markup=get_mailing_control_keyboard(paused=False))

@dp.callback_query(F.data == "stop_mailing")
async def stop_mailing(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = callback_query.from_user.id
    active_mailings[user_id] = False  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ä–∞—Å—Å—ã–ª–∫–µ
    user_data = await state.get_data()
    photo = user_data.get('photo')
    selected_chats = user_data.get('selected_chats')

    # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if photo and os.path.exists(photo):
        os.remove(photo)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('INSERT INTO mailings (user_id, chats, sent_messages, status, start_time) VALUES (?, ?, ?, ?, ?)',
                   (user_id, ','.join(str(c) for c in selected_chats), len(selected_chats), 'finished', datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback_query.message.edit_text("<b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> –ó–∞–≤–µ—Ä—à–µ–Ω–∞")

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===================
async def main():
    # –ó–∞–ø—É—Å–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    asyncio.create_task(check_subscription_expiration())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())