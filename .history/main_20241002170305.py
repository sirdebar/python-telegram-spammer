import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
import random
import sqlite3

API_TOKEN = '8024335015:AAEeQ6cZSHJdvSXhMzyubyth1UHOv2mFtpM'
ADMIN_ID = 1083294848 # –í–∞—à Telegram ID –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('bot_database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, access_expires DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS keys (key TEXT PRIMARY KEY, valid_until DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS mailings (mailing_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, chats TEXT, messages TEXT, status TEXT, sent_messages INTEGER, start_time DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS accounts (user_id INTEGER, phone_number TEXT, session_data BLOB)''')  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
conn.commit()

# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ===================

class AdminStates(StatesGroup):
    waiting_for_days = State()

class UserStates(StatesGroup):
    waiting_for_key = State()
    waiting_for_phone_number = State()
    waiting_for_code = State()
    waiting_for_chats = State()
    waiting_for_messages = State()
    waiting_for_delay = State()

class MailingControlStates(StatesGroup):
    managing_mailing = State()

# ================== –ú–ï–ù–Æ ===================

def get_admin_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üë®‚Äçüíº –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É')],
            [KeyboardButton(text='üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')],
            [KeyboardButton(text='üìã –ü—Ä–æ—Ñ–∏–ª—å')]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_user_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üóùÔ∏è –í–≤–µ—Å—Ç–∏ –∫–æ–¥')],
            [KeyboardButton(text='üìã –ü—Ä–æ—Ñ–∏–ª—å')],
            [KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')],
            [KeyboardButton(text='üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')]
        ],
        resize_keyboard=True
    )
    return keyboard

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===================

@dp.message(F.text == "üóùÔ∏è –í–≤–µ—Å—Ç–∏ –∫–æ–¥")
async def ask_for_code(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á.", parse_mode="HTML")
    await state.set_state(UserStates.waiting_for_key)

@dp.message(UserStates.waiting_for_key)
async def process_code(message: Message, state: FSMContext):
    key = message.text
    cursor.execute('SELECT valid_until FROM keys WHERE key = ?', (key,))
    result = cursor.fetchone()

    if result:
        valid_until = result[0]
        cursor.execute('DELETE FROM keys WHERE key = ?', (key,))
        conn.commit()

        cursor.execute('INSERT INTO users (user_id, access_expires) VALUES (?, ?)', (message.from_user.id, valid_until))
        conn.commit()

        await message.answer(f"–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ: {valid_until}", reply_markup=get_user_menu(), parse_mode="HTML")
        await state.clear()
    else:
        await message.answer("–ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.", parse_mode="HTML")
        await state.clear()

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–û–í ===================

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def ask_for_phone_number(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram.", parse_mode="HTML")
    await state.set_state(UserStates.waiting_for_phone_number)

@dp.message(UserStates.waiting_for_phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    phone_number = message.text
    await state.update_data(phone_number=phone_number)
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω.", parse_mode="HTML")
    await state.set_state(UserStates.waiting_for_code)

@dp.message(UserStates.waiting_for_code)
async def process_code(message: Message, state: FSMContext):
    code = message.text
    user_data = await state.get_data()
    phone_number = user_data['phone_number']
    
    # –ó–¥–µ—Å—å –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ API
    # –ü—Ä–∏–º–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('INSERT INTO accounts (user_id, phone_number, session_data) VALUES (?, ?, ?)', (message.from_user.id, phone_number, 'session_data_here'))
    conn.commit()

    await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_user_menu())
    await state.clear()

# ================== –í–´–ë–û–† –ß–ê–¢–û–í –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ===================

async def list_chats_for_account(user_id):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä, –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ Telegram —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ API
    return ["–í—Å—Ç—Ä–µ—á–∏ –ú–æ—Å–∫–≤–∞", "–í—Å—Ç—Ä–µ—á–∏ –º–æ—Å–∫–æ–≤—Å–∏—Ç–∏"]

@dp.message(F.text == "üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
async def new_mailing(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    chats = await list_chats_for_account(message.from_user.id)

    chat_buttons = []
    for chat in chats:
        chat_buttons.append([InlineKeyboardButton(text=f"{chat} ‚úÖ", callback_data=f"toggle_chat_{chat}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=chat_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)
    await state.set_state(UserStates.waiting_for_chats)

@dp.callback_query(F.data.startswith("toggle_chat_"))
async def toggle_chat(callback_query: CallbackQuery, state: FSMContext):
    chat = callback_query.data.split("_")[-1]
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
    await callback_query.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"{chat} ‚ùå", callback_data=f"toggle_chat_{chat}")]]
    ))

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ===================

@dp.message(UserStates.waiting_for_chats)
async def process_chats(message: Message, state: FSMContext):
    chats = message.text.split(',')
    await state.update_data(chats=chats)

    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É).", parse_mode="HTML")
    await state.set_state(UserStates.waiting_for_messages)

@dp.message(UserStates.waiting_for_messages)
async def process_messages(message: Message, state: FSMContext):
    messages = message.text.split('\n')
    await state.update_data(messages=messages)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.", parse_mode="HTML")
    await state.set_state(UserStates.waiting_for_delay)

@dp.message(UserStates.waiting_for_delay)
async def process_delay(message: Message, state: FSMContext):
    try:
        delay = int(message.text)
        user_data = await state.get_data()
        chats = user_data['chats']
        messages = user_data['messages']

        mailing_id = cursor.execute(
            'INSERT INTO mailings (user_id, chats, messages, status, sent_messages, start_time) VALUES (?, ?, ?, ?, ?, ?)',
            (message.from_user.id, ','.join(chats), '\n'.join(messages), 'active', 0, datetime.now().isoformat())
        ).lastrowid
        conn.commit()

        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ #<b>{mailing_id}</b> —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!", reply_markup=get_mailing_control_keyboard(mailing_id), parse_mode="HTML")

        asyncio.create_task(send_messages(mailing_id, chats, messages, delay))
        await state.clear()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏.", parse_mode="HTML")

async def send_messages(mailing_id, chats, messages, delay):
    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('active', mailing_id))
    conn.commit()

    sent_count = 0

    for chat in chats:
        # –ü–æ—Å–∫–æ–ª—å–∫—É –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª–∞–º, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
        try:
            for message in random.sample(messages, len(messages)):  # –°–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                await bot.send_message(chat.strip(), message)
                sent_count += 1
                cursor.execute('UPDATE mailings SET sent_messages = ? WHERE mailing_id = ?', (sent_count, mailing_id))
                conn.commit()

                await asyncio.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat}: {e}")

    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('completed', mailing_id))
    conn.commit()

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ê–ú–ò ===================

def get_mailing_control_keyboard(mailing_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"pause_mailing_{mailing_id}")],
        [InlineKeyboardButton(text="‚õî –ü—Ä–µ—Ä–≤–∞—Ç—å", callback_data=f"cancel_mailing_{mailing_id}")]
    ])
    return keyboard

@dp.callback_query(F.data.startswith("pause_mailing_"))
async def pause_mailing(callback_query: CallbackQuery):
    mailing_id = callback_query.data.split("_")[-1]
    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('paused', mailing_id))
    conn.commit()

    await callback_query.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ #<b>{mailing_id}</b> –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"resume_mailing_{mailing_id}")]
    ]), parse_mode="HTML")

@dp.callback_query(F.data.startswith("cancel_mailing_"))
async def cancel_mailing(callback_query: CallbackQuery):
    mailing_id = callback_query.data.split("_")[-1]
    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('cancelled', mailing_id))
    conn.commit()

    await callback_query.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ #<b>{mailing_id}</b> –ø—Ä–µ—Ä–≤–∞–Ω–∞.", parse_mode="HTML")

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===================

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())