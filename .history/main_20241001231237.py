import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
import random
import sqlite3
from telethon import TelegramClient

API_TOKEN = '8024335015:AAEeQ6cZSHJdvSXhMzyubyth1UHOv2mFtpM'
ADMIN_ID = 1083294848
API_ID = '23422308'
API_HASH = '1da8d8d190e8fb59531b28258d1ed64c'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('bot_database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS accounts (account_id INTEGER PRIMARY KEY, phone TEXT, session TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, access_expires DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS keys (key TEXT PRIMARY KEY, valid_until DATETIME)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS mailings (mailing_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, account_id INTEGER, chats TEXT, messages TEXT, status TEXT, sent_messages INTEGER, start_time DATETIME)''')
conn.commit()

# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ===================

class AccountStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()

class UserStates(StatesGroup):
    waiting_for_key = State()
    waiting_for_chats = State()
    waiting_for_messages = State()
    waiting_for_delay = State()

class MailingControlStates(StatesGroup):
    managing_mailing = State()

# ================== –ú–ï–ù–Æ ===================

def get_admin_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üë®‚Äçüíº –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É')],
            [KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')],
            [KeyboardButton(text='üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')],
            [KeyboardButton(text='üìã –ü—Ä–æ—Ñ–∏–ª—å')]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_user_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üìã –ü—Ä–æ—Ñ–∏–ª—å')],
            [KeyboardButton(text='üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_mailing_control_keyboard(mailing_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"pause_mailing_{mailing_id}")],
        [InlineKeyboardButton(text="‚õî –ü—Ä–µ—Ä–≤–∞—Ç—å", callback_data=f"cancel_mailing_{mailing_id}")]
    ])
    return keyboard

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–ê ===================

@dp.message(Command(commands=["start"]))
async def start_bot(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, <b>–∞–¥–º–∏–Ω</b>!", reply_markup=get_admin_menu(), parse_mode="HTML")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", parse_mode="HTML")

@dp.message(F.text == "üë®‚Äçüíº –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", parse_mode="HTML")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞", callback_data="generate_key")]
    ])
    await message.answer("<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>:", reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "generate_key")
async def generate_key_panel(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –≤ –¥–Ω—è—Ö.", parse_mode="HTML")
    await state.set_state(AdminStates.waiting_for_days)

@dp.message(AdminStates.waiting_for_days)
async def process_generate_key(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        key = generate_key()
        valid_until = (datetime.now() + timedelta(days=days)).isoformat()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

        cursor.execute('INSERT INTO keys (key, valid_until) VALUES (?, ?)', (key, valid_until))
        conn.commit()

        await message.answer(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: <b>{key}</b>\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π.", parse_mode="HTML")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.", parse_mode="HTML")

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–ö–ö–ê–£–ù–¢–ê–ú–ò ===================

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def add_account(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ Telegram –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.")
        await state.set_state(AccountStates.waiting_for_phone)

@dp.message(AccountStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text
    client = TelegramClient(f'session_{phone}', API_ID, API_HASH)
    
    await client.connect()
    if not await client.is_user_authorized():
        await client.send_code_request(phone)
        await state.update_data(phone=phone, client=client)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram.")
        await state.set_state(AccountStates.waiting_for_code)

@dp.message(AccountStates.waiting_for_code)
async def process_code(message: Message, state: FSMContext):
    code = message.text
    user_data = await state.get_data()
    phone = user_data['phone']
    client = user_data['client']

    try:
        await client.sign_in(phone, code)
        session_string = client.session.save()

        cursor.execute('INSERT INTO accounts (phone, session) VALUES (?, ?)', (phone, session_string))
        conn.commit()

        await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await client.disconnect()
        await state.clear()

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç: {e}")
        await client.disconnect()
        await state.clear()

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–°–´–õ–ö–ò ===================

@dp.message(F.text == "üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
async def new_mailing(message: Message, state: FSMContext):
    cursor.execute('SELECT account_id, phone FROM accounts')
    accounts = cursor.fetchall()

    if not accounts:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ê–∫–∫–∞—É–Ω—Ç {acc[1]}", callback_data=f"select_account_{acc[0]}")] for acc in accounts
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("select_account_"))
async def select_account(callback_query: CallbackQuery, state: FSMContext):
    account_id = int(callback_query.data.split("_")[-1])
    await state.update_data(account_id=account_id)

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).")
    await state.set_state(UserStates.waiting_for_chats)

@dp.message(UserStates.waiting_for_chats)
async def process_chats(message: Message, state: FSMContext):
    chats = message.text.split(',')
    await state.update_data(chats=chats)

    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–¥–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫—É).")
    await state.set_state(UserStates.waiting_for_messages)

@dp.message(UserStates.waiting_for_messages)
async def process_messages(message: Message, state: FSMContext):
    messages = message.text.split('\n')
    await state.update_data(messages=messages)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.")
    await state.set_state(UserStates.waiting_for_delay)

@dp.message(UserStates.waiting_for_delay)
async def process_delay(message: Message, state: FSMContext):
    try:
        delay = int(message.text)
        user_data = await state.get_data()
        chats = user_data['chats']
        messages = user_data['messages']
        account_id = user_data['account_id']

        mailing_id = cursor.execute(
            'INSERT INTO mailings (user_id, account_id, chats, messages, status, sent_messages, start_time) VALUES (?, ?, ?, ?, ?, ?, ?)',
            (message.from_user.id, account_id, ','.join(chats), '\n'.join(messages), 'active', 0, datetime.now().isoformat())
        ).lastrowid
        conn.commit()

        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ #<b>{{mailing_id}</b> —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!", parse_mode="HTML")

        asyncio.create_task(send_messages(mailing_id, account_id, chats, messages, delay))
        await state.clear()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏.")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∏–º–µ–Ω–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
async def send_messages(mailing_id, account_id, chats, messages, delay):
    cursor.execute('SELECT session FROM accounts WHERE account_id = ?', (account_id,))
    session_data = cursor.fetchone()

    client = TelegramClient(f'session_{account_id}', API_ID, API_HASH)
    await client.connect()
    await client.session.load(session_data[0])

    sent_count = 0

    for chat in chats:
        try:
            for message in random.sample(messages, len(messages)):
                await client.send_message(chat.strip(), message)
                sent_count += 1
                cursor.execute('UPDATE mailings SET sent_messages = ? WHERE mailing_id = ?', (sent_count, mailing_id))
                conn.commit()

                await asyncio.sleep(delay)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat}: {e}")

    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('completed', mailing_id))
    conn.commit()
    await client.disconnect()

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ê–ú–ò ===================

@dp.callback_query(F.data.startswith("pause_mailing_"))
async def pause_mailing(callback_query: CallbackQuery):
    mailing_id = callback_query.data.split("_")[-1]
    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('paused', mailing_id))
    conn.commit()

    await callback_query.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ #<b>{mailing_id}</b> –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"resume_mailing_{mailing_id}")]
    ]), parse_mode="HTML")

@dp.callback_query(F.data.startswith("cancel_mailing_"))
async def cancel_mailing(callback_query: CallbackQuery):
    mailing_id = callback_query.data.split("_")[-1]
    cursor.execute('UPDATE mailings SET status = ? WHERE mailing_id = ?', ('cancelled', mailing_id))
    conn.commit()

    await callback_query.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ #<b>{mailing_id}</b> –ø—Ä–µ—Ä–≤–∞–Ω–∞.", parse_mode="HTML")

# ================== –ü–û–ú–û–©–ù–ò–ö–ò ===================

def generate_key():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∫–ª—é—á–∞"""
    return ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', k=8))

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===================

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

