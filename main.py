import logging
import asyncio
import os
import time
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram import Bot, Dispatcher, F
from aiogram import types
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton,InputFile,  ContentType
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from telethon.tl.types import InputPeerChannel, Channel
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PasswordHashInvalidError
from telethon.errors.rpcerrorlist import PhoneNumberInvalidError
from datetime import datetime, timedelta
import random
import aiosqlite
import socks
import requests
import psutil

API_TOKEN = '8024335015:AAEeQ6cZSHJdvSXhMzyubyth1UHOv2mFtpM'
ADMIN_IDS = [1930733528, 7950926692, 1083294848]
TELEGRAM_API_ID = '20996594'
TELEGRAM_API_HASH = 'aa91bd7c0ffccf2750f3b4dc6f97cc31'
BUY_LINK = "https://t.me/Vlktor_dnr"
CHANNEL_NAME = '@diablocatos'
PROXY = {
    'proxy_type': socks.SOCKS5,   # –¢–∏–ø –ø—Ä–æ–∫—Å–∏
    'addr': '148.251.5.30',       # IP –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏
    'port': 824,                  # –ü–æ—Ä—Ç
    'username': '6289fe1cafefb5ce6c43__cr.ru',  # –õ–æ–≥–∏–Ω
    'password': '55bc97d8cbceb786' # –ü–∞—Ä–æ–ª—å
}

if not os.path.exists('temp_photos'):
    os.makedirs('temp_photos')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

session = AiohttpSession()
bot = Bot(token=API_TOKEN, session=session, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher(storage=MemoryStorage())

def get_current_ip():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    proxy = {
        'http': f'socks5://{PROXY["username"]}:{PROXY["password"]}@{PROXY["addr"]}:{PROXY["port"]}',
        'https': f'socks5://{PROXY["username"]}:{PROXY["password"]}@{PROXY["addr"]}:{PROXY["port"]}',
    }
    try:
        ip = requests.get("http://ipinfo.io/ip", proxies=proxy).text.strip()
        return ip
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP"

def create_telegram_client(session_name):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram —Å SOCKS5 –ø—Ä–æ–∫—Å–∏"""
    client = TelegramClient(
        session_name, 
        TELEGRAM_API_ID, 
        TELEGRAM_API_HASH, 
        proxy=(PROXY['proxy_type'], PROXY['addr'], PROXY['port'], True, PROXY['username'], PROXY['password'])
    )
    return client

async def connect_with_proxy(session_path):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏"""
    client = create_telegram_client(session_path)
    await client.connect()
    return client

# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ===================

class AccountStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()

class MailingStates(StatesGroup):
    waiting_for_account = State()
    choosing_chats = State()
    waiting_for_messages = State()
    waiting_for_delay = State()
    waiting_for_action = State()
    waiting_for_type = State()
    waiting_for_text = State()
    waiting_for_photo = State()

class KeyStates(StatesGroup):
    waiting_for_key = State()
    waiting_for_days = State()

class AnnouncementStates(StatesGroup):
    waiting_for_content = State()
    waiting_for_confirmation = State()

class ChannelChangeStates(StatesGroup):
    waiting_for_channel_name = State()

# ================== –°–ú–ï–ù–ê –û–ë–Ø–ó–ê–õ–ö–ò ===================

def get_exit_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="cancel_channel_change")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–º–µ–Ω–∏—Ç—å –æ–±—è–∑–∞–ª–∫—É"
@dp.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –æ–±—è–∑–∞–ª–∫—É")
async def change_channel_prompt(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        sent_message = await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ @username –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:</b>", reply_markup=get_exit_keyboard())
        await state.update_data(sent_message_id=sent_message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        await state.set_state(ChannelChangeStates.waiting_for_channel_name)
    else:
        await message.answer("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.</b>")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
@dp.message(ChannelChangeStates.waiting_for_channel_name)
async def set_new_channel_name(message: Message, state: FSMContext):
    global CHANNEL_NAME
    new_channel_name = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    state_data = await state.get_data()
    sent_message_id = state_data.get("sent_message_id")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—É–±–ª–∏—á–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)
    if not new_channel_name.startswith('@'):
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await message.answer("<b>‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü—É–±–ª–∏—á–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.</b>")
        if sent_message_id:
            await bot.delete_message(chat_id=message.chat.id, message_id=sent_message_id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
    CHANNEL_NAME = new_channel_name
    await message.answer(f"<b>‚úÖ –û–±—è–∑–∞–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞. –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª: {CHANNEL_NAME}</b>", reply_markup=get_admin_menu())

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    if sent_message_id:
        await bot.delete_message(chat_id=message.chat.id, message_id=sent_message_id)
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏"
@dp.callback_query(F.data == "cancel_channel_change")
async def cancel_channel_change(callback_query: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    sent_message_id = state_data.get("sent_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    if sent_message_id:
        try:
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=sent_message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é
    await callback_query.message.answer("<b>üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.</b>", reply_markup=get_admin_menu())
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# ================== –ú–ï–ù–Æ ===================

def get_new_user_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø', url=BUY_LINK)],
            [KeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞')]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_user_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üìã –ü—Ä–æ—Ñ–∏–ª—å')],
            [KeyboardButton(text='üóùÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')],
            [KeyboardButton(text='üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')],
            [KeyboardButton(text='‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏')],
            [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏")] # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
        ],
        resize_keyboard=True
    )
    return keyboard

# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_admin_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üìã –ü—Ä–æ—Ñ–∏–ª—å')],
            [KeyboardButton(text='üóùÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')],
            [KeyboardButton(text='üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')],
            [KeyboardButton(text='‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏')],
            [KeyboardButton(text='üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')] ,
             [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏")] # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        ],
        resize_keyboard=True
    )
    return keyboard


def get_admin_panel_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
        [KeyboardButton(text="üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞", callback_data="generate_key")],
        [KeyboardButton(text="üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_announcement")],
        [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –æ–±—è–∑–∞–ª–∫—É", callback_data="change_mandatory_channel")],
        [KeyboardButton(text='üö™ –í—ã–π—Ç–∏', callback_data="exit_admin_panel")]
    ],
    resize_keyboard=True
    )
    return keyboard


def get_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_NAME.replace('@', '')}")],
        [InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://telegra.ph/Polzovatelskoe-soglashenie-10-05-9")],    
        [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="check_subscription")]
    ])
    return keyboard

def get_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å", callback_data="send_announcement")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_announcement")]
    ])
    return keyboard

@dp.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
async def show_active_mailings(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT mailing_id, chats, status, start_time FROM mailings WHERE user_id = ? AND status = ?', (user_id, 'active')) as cursor:
            active_mailings = await cursor.fetchall()

    if not active_mailings:
        await message.answer("<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.</b>")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    buttons = []
    for mailing in active_mailings:
        mailing_id = mailing[0]
        chats = mailing[1]
        buttons.append([InlineKeyboardButton(text=f"–†–∞—Å—Å—ã–ª–∫–∞ #{mailing_id} ({chats})", callback_data=f"manage_mailing_{mailing_id}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("manage_mailing_"))
async def manage_mailing(callback_query: CallbackQuery):
    mailing_id = int(callback_query.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT status FROM mailings WHERE mailing_id = ?', (mailing_id,)) as cursor:
            mailing = await cursor.fetchone()

    if not mailing:
        await callback_query.message.answer("<b>‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>")
        return

    status = mailing[0]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if status == 'active':
        await callback_query.message.answer(f"<b>üöÄ –†–∞—Å—Å—ã–ª–∫–∞ #{mailing_id} –∑–∞–ø—É—â–µ–Ω–∞! –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞.</b>", reply_markup=get_mailing_control_keyboard(paused=False))
    elif status == 'paused':
        await callback_query.message.answer(f"<b>‚è∏Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ #{mailing_id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</b>", reply_markup=get_mailing_control_keyboard(paused=True))

# ================== –•–≠–ù–î–õ–ï–† –ê–î–ú–ò–ù–ö–ò ===================

@dp.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b>", reply_markup=get_admin_panel_keyboard())
    else:
        await message.answer("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.</b>")

@dp.message(F.text == "üö™ –í—ã–π—Ç–∏")
async def exit_admin_panel(message: Message):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.</b>", reply_markup=get_admin_menu())
    else:
        await message.answer("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>")

# ================== –†–ï–ö–õ–ê–ú–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê ===================

@dp.message(F.text == "üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def start_announcement(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await message.answer("<b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é):</b>")
        await state.set_state(AnnouncementStates.waiting_for_content)
    else:
        await message.answer("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.</b>")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message(AnnouncementStates.waiting_for_content, F.text | F.photo)
async def process_announcement_content(message: Message, state: FSMContext):
    previous_message_data = await state.get_data()

    if "message_id" in previous_message_data:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=previous_message_data['message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if message.photo:
        photo_id = message.photo[-1].file_id
        caption = message.caption if message.caption else ""
        await state.update_data(content_type="photo", photo=photo_id, caption=caption)
        sent_message = await message.answer_photo(photo_id, caption=caption, reply_markup=get_confirmation_keyboard())
    elif message.text:
        await state.update_data(content_type="text", content=message.text)
        sent_message = await message.answer(f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n\n{message.text}", reply_markup=get_confirmation_keyboard())

    await state.update_data(message_id=sent_message.message_id)
    await state.set_state(AnnouncementStates.waiting_for_confirmation)
@dp.callback_query(F.data == "send_announcement")
async def confirm_send_announcement(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    if "message_id" in data:
        try:
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=data['message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º: {e}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT user_id FROM users') as cursor:
            users = await cursor.fetchall()

    if not users:
        await callback_query.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    errors = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –æ—à–∏–±–æ–∫

    if data['content_type'] == "text":
        content = data['content']
        for user in users:
            try:
                user_id = user[0]
                member_status = await bot.get_chat_member(user_id=user_id, chat_id=user_id)
                if member_status.status != "kicked":
                    await bot.send_message(chat_id=user_id, text=content)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                errors.append(user_id)

    elif data['content_type'] == "photo":
        photo_id = data['photo']
        caption = data.get('caption', "")
        for user in users:
            try:
                user_id = user[0]
                member_status = await bot.get_chat_member(user_id=user_id, chat_id=user_id)
                if member_status.status != "kicked":
                    await bot.send_photo(chat_id=user_id, photo=photo_id, caption=caption)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                errors.append(user_id)

    if data['content_type'] == "text":
        await callback_query.message.answer("<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</b>")
    elif data['content_type'] == "photo":
        await callback_query.message.answer("<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</b>")

    if errors:
        await callback_query.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {', '.join(map(str, errors))}")
    
    await state.clear()


@dp.callback_query(F.data == "cancel_announcement")
async def cancel_announcement(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    if "message_id" in data:
        try:
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=data['message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º: {e}")

    await state.clear()
    await callback_query.message.answer("<b>‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>", reply_markup=get_admin_menu())

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===================

async def init_db():
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY, 
                name TEXT, 
                subscription_expires DATETIME,
                is_subscribed BOOLEAN DEFAULT 0,
                personal_mailings INTEGER DEFAULT 0
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS accounts (
                account_id INTEGER PRIMARY KEY AUTOINCREMENT, 
                user_id INTEGER, 
                phone_number TEXT, 
                session TEXT
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS keys (
                key TEXT PRIMARY KEY, 
                valid_until DATETIME, 
                days INTEGER
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS mailings (
                mailing_id INTEGER PRIMARY KEY AUTOINCREMENT, 
                user_id INTEGER, 
                chats TEXT, 
                messages TEXT,  
                sent_messages INTEGER,
                status TEXT DEFAULT 'active',
                start_time DATETIME
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS chats (
                chat_id INTEGER PRIMARY KEY, 
                account_id INTEGER, 
                title TEXT
            )
        ''')
        await db.commit()

# ================== –ü–†–û–§–ò–õ–¨ –ò –ü–û–î–ü–ò–°–ö–ê ===================

@dp.message(F.text == "üìã –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    user_id = message.from_user.id

    async with aiosqlite.connect('bot_database.db') as db:
        if user_id in ADMIN_IDS:
            async with db.execute(
                'SELECT COUNT(*) FROM users WHERE subscription_expires > ?',
                (datetime.now().strftime("%Y-%m-%d %H:%M:%S"),)
            ) as cursor:
                active_subscribers = await cursor.fetchone()
                active_subscribers = active_subscribers[0] or 0

            async with db.execute('SELECT SUM(sent_messages) FROM mailings') as cursor:
                total_mailings = await cursor.fetchone()
                total_mailings = total_mailings[0] or 0

            query = f'SELECT SUM(sent_messages) FROM mailings WHERE user_id IN ({",".join(["?"] * len(ADMIN_IDS))})'
            async with db.execute(query, ADMIN_IDS) as cursor:
                personal_mailings = await cursor.fetchone()
                personal_mailings = personal_mailings[0] or 0

            await message.answer(
                "<b>üëë –ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
                f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {active_subscribers}\n\n"
                f"<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫:</b> {total_mailings}\n\n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫:</b> {personal_mailings}"
            )
        else:
            async with db.execute('SELECT name, subscription_expires, personal_mailings FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()

            if not result:
                await message.answer("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.</b>")
                return

            name, subscription_expires, personal_mailings = result
            await message.answer(
                f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
                f"<b>–ò–º—è:</b> {name}\n\n"
                f"<b>–û—Å—Ç–∞–≤—à–∏–π—Å—è —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_expires}\n\n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫:</b> {personal_mailings}"
            )


# ================== –í–í–û–î –ö–õ–Æ–ß–ê –î–û–°–¢–£–ü–ê ===================

@dp.message(F.text == "üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
async def ask_for_key(message: Message, state: FSMContext):
    await message.answer("<b>üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.</b>")
    await state.set_state(KeyStates.waiting_for_key)

@dp.message(KeyStates.waiting_for_key)
async def process_key(message: Message, state: FSMContext):
    key = message.text
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT valid_until, days FROM keys WHERE key = ?', (key,)) as cursor:
            result = await cursor.fetchone()

    if result:
        valid_until, days = result
        if datetime.strptime(valid_until, "%Y-%m-%d %H:%M:%S") > datetime.now():
            subscription_expires = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
            async with aiosqlite.connect('bot_database.db') as db:
                await db.execute('INSERT OR REPLACE INTO users (user_id, name, subscription_expires) VALUES (?, ?, ?)',
                                (message.from_user.id, message.from_user.full_name, subscription_expires))
                await db.commit()

            await message.answer("<b>‚úÖ –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> –í–∞—à –¥–æ—Å—Ç—É–ø <b>–ø—Ä–æ–¥–ª–µ–Ω</b>.", reply_markup=get_user_menu())
        else:
            await message.answer("<b>‚õî –ö–ª—é—á –∏—Å—Ç–µ–∫.</b>")
    else:
        await message.answer("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.</b>")
    
    await state.clear()

# ================== –ü–û–ö–£–ü–ö–ê –î–û–°–¢–£–ü–ê ===================

@dp.message(F.text == "üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def buy_access(message: Message):
    admin_username = "Vlktor_dnr"
    await message.answer(f"<b>–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É @{admin_username}!</b>")

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê–ú–ò ===================

@dp.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
async def manage_accounts(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT account_id, phone_number FROM accounts WHERE user_id = ?', (user_id,)) as cursor:
            accounts = await cursor.fetchall()

        if not accounts:
            await message.answer("<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.</b>")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {account[1]}", callback_data=f"delete_account_{account[0]}")]
            for account in accounts
        ])
        await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>", reply_markup=keyboard)

# ================== –£–î–ê–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê ===================

@dp.callback_query(F.data.startswith("delete_account_"))
async def confirm_account_deletion(callback_query: CallbackQuery):
    account_id = int(callback_query.data.split("_")[-1])
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT phone_number FROM accounts WHERE account_id = ?', (account_id,)) as cursor:
            phone_number = await cursor.fetchone()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if phone_number is None:
                await callback_query.message.answer("<b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.</b>")
                return

            phone_number = phone_number[0]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"confirm_delete_{account_id}")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_deletion")]
    ])
    
    await callback_query.message.edit_text(
        f"<b>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number}?</b>",
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "cancel_deletion")
async def cancel_deletion(callback_query: CallbackQuery):
    await callback_query.message.edit_text("<b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>")
    await callback_query.message.answer("<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>", reply_markup=get_user_menu())


# ================== –ü–†–û–§–ò–õ–¨ –ò –ü–û–î–ü–ò–°–ö–ê ===================

@dp.message(Command(commands=["start"]))
async def start_bot(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    previous_message_data = await state.get_data()
    if "message_id" in previous_message_data:
        await bot.delete_message(chat_id=message.chat.id, message_id=previous_message_data['message_id'])

    sent_message = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in ADMIN_IDS:
        sent_message = await message.answer("<b>üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!</b>", reply_markup=get_admin_menu())
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with aiosqlite.connect('bot_database.db') as db:
            async with db.execute('SELECT is_subscribed, subscription_expires FROM users WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()

        if result:
            is_subscribed, subscription_expires_str = result
            subscription_expires = datetime.strptime(subscription_expires_str, "%Y-%m-%d %H:%M:%S")

            if is_subscribed and subscription_expires > datetime.now():
                sent_message = await message.answer("<b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω.</b>", reply_markup=get_user_menu())
            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ API –ø–æ –ø—É–±–ª–∏—á–Ω–æ–º—É –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
                try:
                    member_status = await bot.get_chat_member(chat_id=CHANNEL_NAME, user_id=user_id)
                    if member_status.status in ["member", "administrator", "creator"]:
                        await update_subscription_status(user_id, True)
                        sent_message = await message.answer("<b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω.</b>", reply_markup=get_user_menu())
                    else:
                        sent_message = await message.answer("<b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:</b>", reply_markup=get_subscription_keyboard())
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                    sent_message = await message.answer("<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            sent_message = await message.answer("<b>‚ÄºÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–æ—á—Ç–∏—Ç–µ –∏ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.</b>", reply_markup=get_subscription_keyboard())

    if sent_message:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(message_id=sent_message.message_id)


@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    previous_message_data = await state.get_data()
    if "message_id" in previous_message_data:
        try:
            member_status = await bot.get_chat_member(chat_id=CHANNEL_NAME, user_id=user_id)
            if member_status.status in ["member", "administrator", "creator"]:
                await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=previous_message_data['message_id'])  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

    sent_message = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
    try:
        member_status = await bot.get_chat_member(chat_id=CHANNEL_NAME, user_id=user_id)
        if member_status.status in ["member", "administrator", "creator"]:
            async with aiosqlite.connect('bot_database.db') as db:
                async with db.execute('SELECT is_subscribed, subscription_expires FROM users WHERE user_id = ?', (user_id,)) as cursor:
                    result = await cursor.fetchone()

            if result:
                is_subscribed, subscription_expires_str = result
                subscription_expires = datetime.strptime(subscription_expires_str, "%Y-%m-%d %H:%M:%S")

                if is_subscribed and subscription_expires > datetime.now():
                    sent_message = await callback_query.message.answer("<b>üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–∞—à –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω.</b>", reply_markup=get_user_menu())
                else:
                    sent_message = await callback_query.message.answer("<b>üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –∫—É–ø–∏—Ç–µ –¥–æ—Å—Ç—É–ø –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.</b>", reply_markup=get_new_user_menu())
            else:
                sent_message = await callback_query.message.answer("<b>üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –∫—É–ø–∏—Ç–µ –¥–æ—Å—Ç—É–ø –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.</b>", reply_markup=get_new_user_menu())

            await update_subscription_status(user_id, True)
        else:
            # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            await callback_query.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)

    if sent_message:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.update_data(message_id=sent_message.message_id)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def update_subscription_status(user_id, is_subscribed):
    async with aiosqlite.connect('bot_database.db') as db:
        subscription_expires = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")
        await db.execute('UPDATE users SET is_subscribed = ?, subscription_expires = ? WHERE user_id = ?', 
                         (is_subscribed, subscription_expires, user_id))
        await db.commit()
        
# ================== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ===================

async def check_subscription_expiration():
    while True:
        async with aiosqlite.connect('bot_database.db') as db:
            async with db.execute('SELECT user_id, subscription_expires FROM users') as cursor:
                users = await cursor.fetchall()

            for user_id, subscription_expires in users:
                if datetime.strptime(subscription_expires, "%Y-%m-%d %H:%M:%S") < datetime.now():
                    await bot.send_message(
                        user_id,
                        "<b>‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.</b>\n"
                        "–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤—ã –º–æ–∂–µ—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @Vlktor_dnr."
                    )
                    await bot.send_message(
                        user_id,
                        "<b>–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤—ã –º–æ–∂–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.</b>",
                        reply_markup=get_new_user_menu()
                    )
                    await db.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
                    await db.commit()

        await asyncio.sleep(3600)

# ================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê ===================

def get_code_input_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1", callback_data="code_1"), InlineKeyboardButton(text="2", callback_data="code_2"), InlineKeyboardButton(text="3", callback_data="code_3")],
        [InlineKeyboardButton(text="4", callback_data="code_4"), InlineKeyboardButton(text="5", callback_data="code_5"), InlineKeyboardButton(text="6", callback_data="code_6")],
        [InlineKeyboardButton(text="7", callback_data="code_7"), InlineKeyboardButton(text="8", callback_data="code_8"), InlineKeyboardButton(text="9", callback_data="code_9")],
        [InlineKeyboardButton(text="0", callback_data="code_0")]
    ])
    return keyboard

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
# ================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê ===================

# ================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê ===================

@dp.message(F.text == "üóùÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def add_account(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å."""
    await message.answer("<b>üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 9123456789).</b>")
    await state.set_state(AccountStates.waiting_for_phone)

@dp.message(AccountStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if not phone_number.isdigit() or len(phone_number) < 10:
        await message.answer("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.</b>")
        await state.clear()
        return

    session_path = f'sessions/{phone_number}.session'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è –Ω–∞ –¥–∏—Å–∫–µ
    if os.path.exists(session_path):
        try:
            client = TelegramClient(session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH)

            await client.connect()

            if await client.is_user_authorized():
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤–∞
                session_string = client.session.save()
                async with aiosqlite.connect('bot_database.db') as db:
                    await db.execute('INSERT OR REPLACE INTO accounts (user_id, phone_number, session) VALUES (?, ?, ?)', 
                                     (message.from_user.id, phone_number, session_string))
                    await db.commit()

                await message.answer(f"<b>‚úÖ –í—ã —É–∂–µ –≤—Ö–æ–¥–∏–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–Ω–µ–µ, –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!</b>", reply_markup=get_user_menu())
                await state.clear()
                await client.disconnect()
                return
            else:
                await message.answer(f"<b>‚ùó –°–µ—Å—Å–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.</b>")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π: {e}")
            await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π: {e}</b>")
            await state.clear()
            return

    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    client = TelegramClient(session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH, 
                            proxy=(socks.SOCKS5, PROXY['addr'], PROXY['port'], True, PROXY['username'], PROXY['password']))

    try:
        logging.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É Telegram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å –Ω–æ–º–µ—Ä–æ–º {phone_number}...")
        await client.connect()

        if not await client.is_user_authorized():
            await client.send_code_request(phone_number)
            await message.answer(f"<b>üì≤ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.</b>")
            await state.update_data(phone_number=phone_number, client=client, code='')
            await message.answer("–í–∞—à –≤–≤–æ–¥: ", reply_markup=get_code_input_keyboard())
            await state.set_state(AccountStates.waiting_for_code)
        else:
            await message.answer("<b>‚úÖ –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.</b>")
            await state.clear()

    except PhoneNumberInvalidError:
        await message.answer(f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.</b>")
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}</b>")
        await state.clear()


# ================== –£–î–ê–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê ===================

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def delete_account(callback_query: CallbackQuery):
    account_id = int(callback_query.data.split("_")[-1])

    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT phone_number FROM accounts WHERE account_id = ?', (account_id,)) as cursor:
            account = await cursor.fetchone()
            if account is None:
                await callback_query.message.answer("<b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.</b>")
                return

            phone_number = account[0]
            session_path = f'sessions/{phone_number}.session'

        # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ –¥–∏—Å–∫–µ
        await db.execute('DELETE FROM accounts WHERE account_id = ?', (account_id,))
        await db.commit()

    await callback_query.message.edit_text(f"<b>–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.</b>")
    await callback_query.message.answer("<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>", reply_markup=get_user_menu())


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∫–æ–¥–∞
@dp.callback_query(AccountStates.waiting_for_code, lambda c: c.data.startswith('code_'))
async def process_code_digit(callback_query: types.CallbackQuery, state: FSMContext):
    digit = callback_query.data.split('_')[1]
    user_data = await state.get_data()
    current_code = user_data.get('code', '') + digit

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    new_text = f"–í–∞—à –≤–≤–æ–¥: {current_code}"
    await callback_query.message.edit_text(new_text, reply_markup=get_code_input_keyboard())

    if len(current_code) < 5:
        await state.update_data(code=current_code)
        await callback_query.answer()  # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞–∂–∞—Ç–∏–∏
    else:
        # –ö–æ–≥–¥–∞ –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–±—Ä–∞–Ω (5 —Ü–∏—Ñ—Ä)
        phone_number = user_data['phone_number']
        client = user_data['client']
        
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º {current_code} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}")
            await client.sign_in(phone_number, current_code)
            session_string = client.session.save()
            async with aiosqlite.connect('bot_database.db') as db:
                await db.execute('INSERT INTO accounts (user_id, phone_number, session) VALUES (?, ?, ?)', 
                                 (callback_query.from_user.id, phone_number, session_string))
                await db.commit()

            await callback_query.message.edit_text(f"<b>üóùÔ∏è –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.</b>")
            await state.clear()

        except SessionPasswordNeededError:
            await callback_query.message.answer("<b>üîê –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</b>")
            await state.update_data(client=client)
            await state.set_state(AccountStates.waiting_for_password)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await callback_query.message.edit_text(f"<b>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b> {e}")
            await state.clear()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è
@dp.message(AccountStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text
    user_data = await state.get_data()
    client = user_data['client']

    try:
        await client.sign_in(password=password)
        phone_number = user_data['phone_number']
        session_string = client.session.save()
        async with aiosqlite.connect('bot_database.db') as db:
            await db.execute('INSERT INTO accounts (user_id, phone_number, session) VALUES (?, ?, ?)', 
                             (message.from_user.id, phone_number, session_string))
            await db.commit()

        await message.answer(f"<b>üóùÔ∏è –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.</b>")
        await state.clear()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    except PasswordHashInvalidError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è 2FA –¥–ª—è {user_data['phone_number']}")
        await message.answer("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω.</b>")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–∞—Ä–æ–ª–µ–º: {e}")
        await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b> {e}")
        await state.set_state(AccountStates.waiting_for_password)

# ================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–õ–Æ–ß–ê –î–õ–Ø –ê–î–ú–ò–ù–ê ===================

@dp.message(F.text == "üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞")
async def ask_for_days(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("<b>‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.</b>")
        return
    await message.answer("<b>üìÖ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –≤ –¥–Ω—è—Ö:</b>")
    await state.set_state(KeyStates.waiting_for_days)

@dp.message(KeyStates.waiting_for_days)
async def generate_key(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        if days <= 0:
            await message.answer("<b>‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.</b>")
            return

        key = generate_random_key()
        valid_until = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")

        async with aiosqlite.connect('bot_database.db') as db:
            await db.execute('INSERT INTO keys (key, valid_until, days) VALUES (?, ?, ?)', (key, valid_until, days))
            await db.commit()

        await message.answer(f"<b>üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ {days} –¥–Ω–µ–π:</b> {key}")
        await state.clear()

    except ValueError:
        await message.answer("<b>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.</b>")

def generate_random_key():
    return ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=8))

# ================== –†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===================

@dp.message(F.text == "üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
async def new_mailing(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    previous_message_id = await state.get_data()
    if "message_id" in previous_message_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=previous_message_id['message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT account_id, phone_number FROM accounts WHERE user_id = ?', (message.from_user.id,)) as cursor:
            accounts = await cursor.fetchall()

    if not accounts:
        sent_message = await message.answer("<b>‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ê–∫–∫–∞—É–Ω—Ç {account[1]}", callback_data=f"choose_account_{account[0]}")]
        for account in accounts
    ])

    sent_message = await message.answer("<b>üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", reply_markup=keyboard)
    await state.set_state(MailingStates.waiting_for_account)
    await state.update_data(message_id=sent_message.message_id)

@dp.callback_query(F.data.startswith("choose_account_"))
async def choose_account(callback_query: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    previous_message_id = await state.get_data()
    if "message_id" in previous_message_id:
        try:
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=previous_message_id['message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    account_id = int(callback_query.data.split("_")[-1])

    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT phone_number, session FROM accounts WHERE account_id = ?', (account_id,)) as cursor:
            account = await cursor.fetchone()
            phone_number, session_string = account

    client = TelegramClient(f'sessions/{phone_number}', TELEGRAM_API_ID, TELEGRAM_API_HASH)
    await client.connect()
    if not await client.is_user_authorized():
        await callback_query.message.answer("<b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.</b>")
        await state.clear()
        return

    await get_group_chats(client, account_id)
    await client.disconnect()

    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT chat_id, title FROM chats WHERE account_id = ?', (account_id,)) as cursor:
            chats = await cursor.fetchall()

    await state.update_data(account_id=account_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —á–∞—Ç–æ–≤
    await show_chat_selection(callback_query.message, chats, state, page=0)

async def show_chat_selection(message, chats, state: FSMContext, page=0):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    previous_message_id = await state.get_data()
    if "message_id" in previous_message_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=previous_message_id['message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–æ–∫–∞–∑ —á–∞—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    per_page = 10
    start = page * per_page
    end = start + per_page
    current_page_chats = chats[start:end]

    user_data = await state.get_data()
    selected_chats = user_data.get('selected_chats', [])

    buttons = []
    for chat in current_page_chats:
        # –ï—Å–ª–∏ —á–∞—Ç –≤ —Å–ø–∏—Å–∫–µ selected_chats, —Ç–æ –æ–Ω –≤–∫–ª—é—á–µ–Ω (‚úÖ), –∏–Ω–∞—á–µ –≤—ã–∫–ª—é—á–µ–Ω (‚ùå)
        status = "‚úÖ" if chat[0] in selected_chats else "‚ùå"
        buttons.append([InlineKeyboardButton(text=f"{chat[1]} {status}", callback_data=f"toggle_chat_{chat[0]}")])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if len(chats) > per_page:
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_page_{page-1}"))
        if end < len(chats):
            pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_page_{page+1}"))
        buttons.append(pagination_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–£–±—Ä–∞—Ç—å –≤—Å–µ" –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    buttons.append([InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="clear_all_chats")])
    buttons.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_chats")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    sent_message = await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", reply_markup=keyboard)
    await state.update_data(message_id=sent_message.message_id, selected_chats=selected_chats, all_chats=chats, page=page)

@dp.callback_query(F.data == "clear_all_chats")
async def clear_all_chats(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    chats = user_data['all_chats']
    page = user_data['page']

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, —Ç–æ –µ—Å—Ç—å –≤—Å–µ —á–∞—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã (—Å –∫—Ä–µ—Å—Ç–∏–∫–æ–º ‚ùå)
    selected_chats = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω —á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω
    await state.update_data(selected_chats=selected_chats)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —á–∞—Ç—ã —Å –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏
    await show_chat_selection(callback_query.message, chats, state, page)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤—ã–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ show_chat_selection:
@dp.callback_query(F.data.startswith("toggle_chat_"))
async def toggle_chat(callback_query: CallbackQuery, state: FSMContext):
    chat_id = int(callback_query.data.split("_")[-1])
    user_data = await state.get_data()
    selected_chats = user_data['selected_chats']

    if chat_id in selected_chats:
        selected_chats.remove(chat_id)
    else:
        selected_chats.append(chat_id)

    await state.update_data(selected_chats=selected_chats)

    chats = user_data['all_chats']
    page = user_data['page']
    await show_chat_selection(callback_query.message, chats, state, page=page)

@dp.callback_query(F.data.startswith("next_page_") | F.data.startswith("prev_page_"))
async def paginate_chats(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    chats = user_data['all_chats']
    page = int(callback_query.data.split("_")[-1])

    await show_chat_selection(callback_query.message, chats, state, page)


@dp.callback_query(F.data.startswith("next_page_") | F.data.startswith("prev_page_"))
async def paginate_chats(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    chats = user_data['all_chats']
    page = int(callback_query.data.split("_")[-1])

    await show_chat_selection(callback_query.message, chats, state, page)

@dp.callback_query(F.data == "confirm_chats")
async def confirm_chats(callback_query: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    previous_message_id = await state.get_data()
    if "message_id" in previous_message_id:
        try:
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=previous_message_id['message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_message = await callback_query.message.answer("<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>")
    await state.set_state(MailingStates.waiting_for_messages)
    await state.update_data(message_id=sent_message.message_id)

@dp.message(MailingStates.waiting_for_messages, F.text | F.photo)
async def process_messages(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    previous_message_id = await state.get_data()
    if "message_id" in previous_message_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=previous_message_id['message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if message.photo:
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        downloaded_file = await bot.download_file(file_path)

        photo_path = f"temp_photos/{photo.file_id}.jpg"
        os.makedirs("temp_photos", exist_ok=True)
        with open(photo_path, 'wb') as new_file:
            new_file.write(downloaded_file.getvalue())

        await state.update_data(photo=photo_path)
        if message.caption:
            await state.update_data(messages=message.caption)
        else:
            await state.update_data(messages=None)

    elif message.text:
        await state.update_data(messages=message.text)
        await state.update_data(photo=None)

    sent_message = await message.answer("<b>‚è≥ –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5—Å, 5–º, 5—á).</b>")
    await state.set_state(MailingStates.waiting_for_delay)
    await state.update_data(message_id=sent_message.message_id)

def parse_delay(delay_str):
    if delay_str.endswith('—Å'):
        return int(delay_str[:-1])
    elif delay_str.endswith('–º'):
        return int(delay_str[:-1]) * 60
    elif delay_str.endswith('—á'):
        return int(delay_str[:-1]) * 3600
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–µ—Ä–∂–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å (—Å–µ–∫—É–Ω–¥—ã), –º (–º–∏–Ω—É—Ç—ã), —á (—á–∞—Å—ã).")

@dp.message(MailingStates.waiting_for_delay)
async def process_delay(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    previous_message_id = await state.get_data()
    if "message_id" in previous_message_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=previous_message_id['message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        delay = parse_delay(message.text)
        if delay < 5 or delay > 18000:
            raise ValueError

        await state.update_data(delay=delay)

        user_data = await state.get_data()
        account_id = user_data['account_id']
        selected_chats = user_data['selected_chats']
        messages = user_data.get('messages')
        photo = user_data.get('photo')

        if not messages and not photo:
            await message.answer("<b>‚ö†Ô∏è –í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>")
            return

        # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
        asyncio.create_task(start_mailing(account_id, selected_chats, messages, photo, delay, message.from_user.id))
        sent_message = await message.answer("<b>üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –°—Ç–∞—Ç—É—Å: <b>–ê–∫—Ç–∏–≤–Ω–∞</b></b>", reply_markup=get_mailing_control_keyboard(paused=False))
        await state.set_state(MailingStates.waiting_for_action)
        await state.update_data(message_id=sent_message.message_id)

    except ValueError:
        await message.answer("<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 5—Å, 5–º, 5—á.</b>")

def get_mailing_control_keyboard(paused=False):
    buttons = []
    if paused:
        buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="resume_mailing")])
    else:
        buttons.append([InlineKeyboardButton(text="‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="pause_mailing")])
    buttons.append([InlineKeyboardButton(text="‚èπ –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="stop_mailing")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def send_messages(account_id, chats, messages, delay, user_id):
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT phone_number, session FROM accounts WHERE account_id = ?', (account_id,)) as cursor:
            account = await cursor.fetchone()

    session_path = f'sessions/{account[0]}.session'
    client = TelegramClient(session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH)
    await client.connect()

    sent_count = 0

    for chat in chats:
        try:
            await client.send_message(chat, messages)
            sent_count += 1
            async with aiosqlite.connect('bot_database.db') as db:
                await db.execute(
                    'INSERT INTO mailings (user_id, chats, messages, status, sent_messages, start_time) VALUES (?, ?, ?, ?, ?, ?)',
                    (user_id, ','.join(str(c) for c in chats), '\n'.join(messages), 'active', sent_count, datetime.now().isoformat())
                )
                await db.commit()

            await asyncio.sleep(delay)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat}: {e}")

    await client.disconnect()

# ================== –ü–ê–†–°–ò–ù–ì –ß–ê–¢–û–í ===================

async def get_group_chats(client, account_id):
    dialogs = await client.get_dialogs()
    async with aiosqlite.connect('bot_database.db') as db:
        for dialog in dialogs:
            if isinstance(dialog.entity, Channel) and dialog.entity.megagroup:
                chat_id = dialog.id
                title = dialog.title
                await db.execute('INSERT OR REPLACE INTO chats (chat_id, account_id, title) VALUES (?, ?, ?)', 
                                (chat_id, account_id, title))
        await db.commit()

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–û–ô ===================

active_mailings = {}

# ================== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ê–°–°–´–õ–ö–ò ===================

async def start_mailing(account_id, chats, messages, photo, delay, user_id):
    # –ü–æ–º–µ—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é –≤ –ë–î
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''
            INSERT INTO mailings (user_id, chats, messages, status, sent_messages, start_time) 
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, ','.join(map(str, chats)), messages, 'active', 0, datetime.now().isoformat()))
        await db.commit()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT phone_number, session FROM accounts WHERE account_id = ?', (account_id,)) as cursor:
            account = await cursor.fetchone()

    session_path = f'sessions/{account[0]}.session'
    sent_count = 0  # –°—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
    for chat_id in chats:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        if not await is_mailing_active(user_id):
            break
        try:
            client = TelegramClient(session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH, 
                                    proxy=(socks.SOCKS5, PROXY['addr'], PROXY['port'], True, PROXY['username'], PROXY['password']))
            await client.connect()

            current_ip = get_current_ip()
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} —Å IP: {current_ip}")

            if photo:
                await client.send_file(chat_id, photo, caption=messages if messages else "")
            else:
                await client.send_message(chat_id, messages)
            sent_count += 1
            await client.disconnect()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    while await is_mailing_active(user_id):
        await asyncio.sleep(delay)
        for chat_id in chats:
            if not await is_mailing_active(user_id):
                break
            try:
                client = TelegramClient(session_path, TELEGRAM_API_ID, TELEGRAM_API_HASH, 
                                        proxy=(socks.SOCKS5, PROXY['addr'], PROXY['port'], True, PROXY['username'], PROXY['password']))
                await client.connect()

                current_ip = get_current_ip()
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} —Å IP: {current_ip}")

                if photo:
                    await client.send_file(chat_id, photo, caption=messages if messages else "")
                else:
                    await client.send_message(chat_id, messages)
                sent_count += 1
                await client.disconnect()

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ë–î
async def is_mailing_active(user_id):
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT status FROM mailings WHERE user_id = ? ORDER BY start_time DESC LIMIT 1', (user_id,)) as cursor:
            result = await cursor.fetchone()
            return result and result[0] == 'active'

# –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == "pause_mailing")
async def pause_mailing(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('UPDATE mailings SET status = ? WHERE user_id = ? AND status = ?', ('paused', user_id, 'active'))
        await db.commit()

    await callback_query.message.edit_text("<b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=get_mailing_control_keyboard(paused=True))

# –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == "resume_mailing")
async def resume_mailing(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    account_id = user_data.get('account_id')
    selected_chats = user_data.get('selected_chats')
    messages = user_data.get('messages')
    photo = user_data.get('photo')
    delay = user_data.get('delay')

    if photo and not os.path.exists(photo):
        await callback_query.message.edit_text("<b>–û—à–∏–±–∫–∞:</b> –§–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ.")
        return

    if not account_id or not selected_chats or not delay:
        await callback_query.message.edit_text("<b>–û—à–∏–±–∫–∞:</b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('UPDATE mailings SET status = ? WHERE user_id = ? AND status = ?', ('active', callback_query.from_user.id, 'paused'))
        await db.commit()

    asyncio.create_task(start_mailing(account_id, selected_chats, messages, photo, delay, callback_query.from_user.id))

    await callback_query.message.edit_text("<b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> –ê–∫—Ç–∏–≤–Ω–∞", reply_markup=get_mailing_control_keyboard(paused=False))

@dp.callback_query(F.data == "stop_mailing")
async def stop_mailing(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞, –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë
    async with aiosqlite.connect('bot_database.db') as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ë–î –Ω–∞ 'stopped'
        await db.execute('UPDATE mailings SET status = ? WHERE user_id = ? AND status IN (?, ?)', 
                         ('stopped', user_id, 'active', 'paused'))
        await db.commit()

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute('UPDATE mailings SET sent_messages = sent_messages + 1 WHERE user_id = ?', (user_id,))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await db.execute('UPDATE mailings SET sent_messages = sent_messages + 1 WHERE user_id IN ({})'.format(','.join(map(str, ADMIN_IDS))))
        await db.commit()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    photo = user_data.get('photo')
    selected_chats = user_data.get('selected_chats', [])

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if photo and os.path.exists(photo):
        try:
            os.remove(photo)
            logging.info(f"–§–æ—Ç–æ {photo} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.message.edit_text(f"<b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> –ó–∞–≤–µ—Ä—à–µ–Ω–∞")


# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===================

async def main():
    await init_db()
    asyncio.create_task(check_subscription_expiration())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())